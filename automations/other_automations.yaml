- id: bike_day
  alias: 'Bike Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '11:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.bike_day'
          state: 'yes'
        - condition: template
          value_template: "{{ not is_state('sensor.sean_location', 'Traveling') }}"
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - fri
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Bike Day"
      message: "It's a good day to ride your bike to work today!"
      data:
        push:
          category: weather
        entity_id: weather.openweathermap 
      
- id: posta_state_change
  alias: 'Posta state change'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.cp_packages_coming_today
  condition:
    condition: state
    entity_id: 'sensor.cp_packages_coming_today'
    state: 'Delivery'
  action:
    service: variable.set_variable
    data:
      variable: posta_variable
      attributes_template: >
        {
          "from": "{{ state_attr('sensor.cp_packages_coming_today', 'from') }}",
          "date": "{{ state_attr('sensor.cp_packages_coming_today', 'date') }}",
          "subject": "{{ state_attr('sensor.cp_packages_coming_today', 'subject') }}"
        }
    data_template:
      value: >
          {{ states('sensor.cp_packages_coming_today')}}

#,
#          "body": "{{ state_attr('sensor.cp_packages_coming_today', 'body') }}"
#        } 

- id: posta_variable_reset
  alias: 'Posta Variable Reset'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '00:00:01'
  action:
    service: variable.set_variable
    data:
      variable: posta_variable
      value: no_delivery
      attributes:
        from: ''
        date: ''
        subject: ''
        body: ''
        icon: mdi:truck-delivery

- id: dpd_state_change
  alias: 'DPD state change'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.dpd_packages_coming_today
  condition:
    condition: state
    entity_id: 'sensor.dpd_packages_coming_today'
    state: 'Delivery'
  action:
    service: variable.set_variable
    data:
      variable: dpd_variable
      attributes_template: >
        {
          "from": "{{ state_attr('sensor.dpd_packages_coming_today', 'from') }}",
          "date": "{{ state_attr('sensor.dpd_packages_coming_today', 'date') }}",
          "subject": "{{ state_attr('sensor.dpd_packages_coming_today', 'subject') }}"
        } 
    data_template:
      value: >
        {{ states('sensor.dpd_packages_coming_today')}}

#,
#          "body": "{{ state_attr('sensor.dpd_packages_coming_today', 'body') }}"


- id: dpd_variable_reset
  alias: 'DPD Variable Reset'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '00:00:01'
  action:
    service: variable.set_variable
    data:
      variable: dpd_variable
      value: no_delivery
      attributes:
        from: ''
        date: ''
        subject: ''
        body: ''
        icon: mdi:truck-delivery

- id: dhl_state_change
  alias: 'DHL state change'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.dhl_packages_coming_today
  condition:
    condition: state
    entity_id: 'sensor.dhl_packages_coming_today'
    state: 'Delivery'
  action:
    service: variable.set_variable
    data:
      variable: dhl_variable   
      attributes_template: >
        {
          "from": "{{ state_attr('sensor.dhl_packages_coming_today', 'from') }}",
          "date": "{{ state_attr('sensor.dhl_packages_coming_today', 'date') }}",
          "subject": "{{ state_attr('sensor.dhl_packages_coming_today', 'subject') }}"
        } 
    data_template:
      value: >
        {{ states('sensor.dhl_packages_coming_today')}}


 #,
#          "body": "{{ state_attr('sensor.dhl_packages_coming_today', 'body') }}"

        
- id: dhl_variable_reset
  alias: 'DHL Variable Reset'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '00:00:01'
  action:
    service: variable.set_variable
    data:
      variable: dhl_variable
      value: no_delivery
      attributes:
        from: ''
        date: ''
        subject: ''
        body: ''
        icon: mdi:truck-delivery

- id: gls_state_change
  alias: 'GLS state change'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.gls_packages_coming_today
  condition:
    condition: state
    entity_id: 'sensor.gls_packages_coming_today'
    state: 'Delivery'
  action:
    service: variable.set_variable
    data:
      variable: gls_variable
      attributes_template: >
        {
          "from": "{{ state_attr('sensor.gls_packages_coming_today', 'from') }}",
          "date": "{{ state_attr('sensor.gls_packages_coming_today', 'date') }}",
          "subject": "{{ state_attr('sensor.gls_packages_coming_today', 'subject') }}"
        }
    data_template:
      value: >
        {{ states('sensor.gls_packages_coming_today')}}

#,
#          "body": "{{ state_attr('sensor.gls_packages_coming_today', 'body') }}"

- id: gls_variable_reset
  alias: 'GLS Variable Reset'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '00:00:01'
  action:
    service: variable.set_variable
    data:
      variable: gls_variable
      value: no_delivery
      attributes:
        from: ''
        date: ''
        subject: ''
        body: ''
        icon: mdi:truck-delivery

- id: power_out
  alias: 'Power is out'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.house_electricity
    to: 'power_out'
  action:
    service: notify.whole_family
    data:
      title: "Power is Out at Home"
      message: "There's been a power cut at home. Electricity is now off"

- id: power_restored
  alias: 'Power is restored'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.house_electricity
    to: 'power_on'
  action:
    service: notify.whole_family
    data:
      title: "Power Restored at Home"
      message: "Electricity has been powered back on at home"

- id: moldy_conditions
  alias: 'Moldy Conditions'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: binary_sensor.popp_unknown_type_0004_id_0014_sensor
    to: 'on'
  action:
    service: notify.sean_alena
    data:
      title: "Mold Detector"
      message: "There are conditions for mold formation under the sink right now"
     
- id: internet_upload_limited
  alias: 'Internet Upload is Limited'
  hide_entity: true      
  trigger:
    platform: numeric_state
    entity_id: sensor.speedtest_upload
    below: 0.25
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Internet is Severely Limited"
      message: "The upload speed of the internet is below 250kbit"
  
- id: internet_upload_normal
  alias: 'Internet Upload is Normal'
  hide_entity: true     
  trigger:
    platform: numeric_state
    entity_id: sensor.speedtest_upload
    above: 1
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Internet is Normal"
      message: "The upload speed of the internet is above 1 mbit"
 
- id: sophie_up_late
  alias: 'Sophie up late'
  hide_entity: true
  initial_state: 'true'
  trigger:
    - platform: state
      entity_id: binary_sensor.sophies_room_zone_10
      to: 'on'
  condition:
    condition: or
    conditions:
      - condition: and
        conditions:
          - condition: time
            after: '22:30:00'
            before: '5:00:00'
          - condition: template
            value_template: "{{ not is_state('device_tracker.sean_s_iphone_x', 'Traveling') }}"
          - condition: template
            value_template: "{{ now().strftime('%m')|int > 6 or now().strftime('%m')|int < 9 }}"
      - condition: and
        conditions:
          - condition: time
            after: '21:30:00'
            before: '5:00:00'
          - condition: template
            value_template: "{{ not is_state('device_tracker.sean_s_iphone_x', 'Traveling') }}"
          - condition: template
            value_template: "{{ now().strftime('%m')|int > 8 or now().strftime('%m')|int < 7 }}"
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Sophie is Up Late"
      message: "Sophie is Up Late"

#          - condition: time
#            after: '21:30:00'
#            before: '5:00:00'
#          - condition: template
#            value_template: "{{ not is_state('device_tracker.sean_s_iphone_x', 'Traveling') }}"
#          - condition: template
#            value_template: "{{ now().strftime('%m')|int = 8 or now().strftime('%m')|int = 7 }}"


- id: 'update_airvisualnode_home_data'
  alias: 'Update AirVisual node home data'
  trigger:
    minutes: '/5'
    platform: time_pattern
  action:
  - service: shell_command.update_avnodehome_data
  initial_state: 'on'
  hide_entity: 'true'

- id: 'update_airvisualnode_hlubocepy_data'
  alias: 'Update AirVisual node Hlubocepy data'
  trigger:
    minutes: '/5'
    platform: time_pattern
  action:
  - service: shell_command.update_avnodehlubocepy_data
  initial_state: 'on'
  hide_entity: 'true'

#- alias: Turn off sophie up late in summer
#  initial_state: 'on'
#  hide_entity: 'true'
#  trigger:
#    - platform: homeassistant
#      event: start
#  condition:
#    condition: template
#    value_template: >
#      {{ now().strftime('%m')|int <= 8 and
#         now().strftime('%m')|int >= 7 }}
#  action:
#    - delay: '00:02:00'
#    - service: automation.turn_off
#      entity_id:
#        - automation.sophie_up_late
        
- id: bio_odpad_day_tomorrow_sean
  alias: 'Bio Odpad Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '21:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.bio_odpad_day'
          state: 'Tomorrow'
        - condition: template
          value_template: "{{ not is_state('sensor.sean_location', 'Traveling') }}"
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Bio Odpad Tomorrow"
      message: "Bio odpad should be taken out tonight or tomorrow for collection on {% if now().weekday() in (5,)  %}Monday{% elif now().weekday() in (6,)  %}Tuesday{% elif now().weekday() in (0,)  %}Wednesday{% elif now().weekday() in (1,)  %}Thursday{% elif now().weekday() in (2,)  %}Friday{% elif now().weekday() in (3,)  %}Saturday{% elif now().weekday() in (4,)  %}Sunday{% endif %} Morning"

- id: bio_odpad_day_tomorrow_alena
  alias: 'Bio Odpad Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '15:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.bio_odpad_day'
          state: 'Tomorrow'
  action:
    service: notify.ios_alenas_iphone_x
    data:
      title: "Bio Odpad Tomorrow"
      message: "Bio odpad should be taken out today or tomorrow for collection on {% if now().weekday() in (5,)  %}Monday{% elif now().weekday() in (6,)  %}Tuesday{% elif now().weekday() in (0,)  %}Wednesday{% elif now().weekday() in (1,)  %}Thursday{% elif now().weekday() in (2,)  %}Friday{% elif now().weekday() in (3,)  %}Saturday{% elif now().weekday() in (4,)  %}Sunday{% endif %} Morning"


- id: trash_day_tomorrow_sean
  alias: 'Trash Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '21:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.trash_day'
          state: 'Tomorrow'
        - condition: template
          value_template: "{{ not is_state('sensor.sean_location', 'Traveling') }}"
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Trash Tomorrow"
      message: "Trash should be taken out tonight or tomorrow for collection on {% if now().weekday() in (5,)  %}Monday{% elif now().weekday() in (6,)  %}Tuesday{% elif now().weekday() in (0,)  %}Wednesday{% elif now().weekday() in (1,)  %}Thursday{% elif now().weekday() in (2,)  %}Friday{% elif now().weekday() in (3,)  %}Saturday{% elif now().weekday() in (4,)  %}Sunday{% endif %} Morning"

- id: trash_day_tomorrow_alena
  alias: 'Trash Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '15:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.trash_day'
          state: 'Tomorrow'
  action:
    service: notify.ios_alenas_iphone_x
    data:
      title: "Trash Tomorrow"
      message: "Trash should be taken out today or tomorrow for collection on {% if now().weekday() in (5,)  %}Monday{% elif now().weekday() in (6,)  %}Tuesday{% elif now().weekday() in (0,)  %}Wednesday{% elif now().weekday() in (1,)  %}Thursday{% elif now().weekday() in (2,)  %}Friday{% elif now().weekday() in (3,)  %}Saturday{% elif now().weekday() in (4,)  %}Sunday{% endif %} Morning"


- id: bio_odpad_day_today_sean
  alias: 'Bio Odpad Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '21:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.bio_odpad_day'
          state: 'Today'
        - condition: template
          value_template: "{{ not is_state('sensor.sean_location', 'Traveling') }}"
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Bio Odpad Today"
      message: "Bio odpad should be taken out tonight for collection on {% if now().weekday() in (6,)  %}Monday{% elif now().weekday() in (0,)  %}Tuesday{% elif now().weekday() in (1,)  %}Wednesday{% elif now().weekday() in (2,)  %}Thursday{% elif now().weekday() in (3,)  %}Friday{% elif now().weekday() in (4,)  %}Saturday{% elif now().weekday() in (5,)  %}Sunday{% endif %} Morning"

- id: bio_odpad_day_today_alena
  alias: 'Bio Odpad Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '15:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.bio_odpad_day'
          state: 'Today'
  action:
    service: notify.ios_alenas_iphone_x
    data:
      title: "Bio Odpad Today"
      message: "Bio odpad should be taken out today for collection on {% if now().weekday() in (6,)  %}Monday{% elif now().weekday() in (0,)  %}Tuesday{% elif now().weekday() in (1,)  %}Wednesday{% elif now().weekday() in (2,)  %}Thursday{% elif now().weekday() in (3,)  %}Friday{% elif now().weekday() in (4,)  %}Saturday{% elif now().weekday() in (5,)  %}Sunday{% endif %} Morning"


- id: trash_day_today_sean
  alias: 'Trash Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '21:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.trash_day'
          state: 'Today'
        - condition: template
          value_template: "{{ not is_state('sensor.sean_location', 'Traveling') }}"
  action:
    service: notify.ios_seans_iphone_x
    data:
      title: "Trash Day Today"
      message: "Trash should be taken out tonight for collection on {% if now().weekday() in (6,)  %}Monday{% elif now().weekday() in (0,)  %}Tuesday{% elif now().weekday() in (1,)  %}Wednesday{% elif now().weekday() in (2,)  %}Thursday{% elif now().weekday() in (3,)  %}Friday{% elif now().weekday() in (4,)  %}Saturday{% elif now().weekday() in (5,)  %}Sunday{% endif %} Morning"

- id: trash_day_today_alena
  alias: 'Trash Day'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '15:00:00'
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: 'sensor.trash_day'
          state: 'Today'
  action:
    service: notify.ios_alenas_iphone
    data:
      title: "Trash Day Today"
      message: "Trash should be taken out today for collection on {% if now().weekday() in (6,)  %}Monday{% elif now().weekday() in (0,)  %}Tuesday{% elif now().weekday() in (1,)  %}Wednesday{% elif now().weekday() in (2,)  %}Thursday{% elif now().weekday() in (3,)  %}Friday{% elif now().weekday() in (4,)  %}Saturday{% elif now().weekday() in (5,)  %}Sunday{% endif %} Morning"

- alias: 'update_bio_odpad_sensor'
  trigger:
    platform: time
    at: '00:00:01'
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.bio_odpad_day

- alias: 'update_trash_sensor'
  trigger:
    platform: time
    at: '00:00:01'
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.trash_day

- id: update_morning_commute_sensor
  alias: "Update morning commute sensor"
  initial_state: 'on'
  hide_entity: true
  trigger:
    - platform: time_pattern
      seconds: 17
  condition:
    - condition: time
      after: '10:00:00'
      before: '13:00:00'
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.transport_time_to_work


- id: basement_flooding
  alias: 'Basement Flooding'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: binary_sensor.basement_is_flooding
    to: 'on'
  action:
    service: notify.sean_alena
    data:
      title: "Basement Flooding"
      message: "The basement is flooding"

- id: basement_flooding_2
  alias: 'Basement Flooding 2'
  hide_entity: true
  initial_state: 'true'
  trigger:
    - platform: time_pattern
      minutes: 30
  condition:
    condition: state
    entity_id: 'binary_sensor.basement_is_flooding'
    state: 'on'
  action:
    service: notify.sean_alena
    data:
      title: "Basement Flooding"
      message: "The basement is flooding"

- id: automatic_theme_change
  alias: Automatic Theme Change
  hide_entity: true
  initial_state: 'true'
  trigger:
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: sun.sun
      to: above_horizon
    - platform: sun
      event: sunset
      offset: "+00:30:00"
  action:
    - service_template: frontend.set_theme
      data_template:
        name: >
          {% if states.sun.sun.state == "above_horizon" %}
            default
          {% else %}
            midnight
          {% endif %}

- id: backup_snapshots_to_dropbox_nightly
  alias: "Nightly Backup of Snapshots to Dropbox"
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: time
    at: '4:00:00'
  action:
  - service: hassio.addon_stdin
    data: 
      addon: "7be23ff5_dropbox_sync"
      input: 
        command: "upload"

- id: preserve_sophies_room_aqi
  alias: 'Preserve Sophies Room AQI to Variable'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.sophies_room_aqi
  condition:
    condition: template
    value_template: "{{ not is_state('sensor.sophies_room_aqi', '0 (Good)') }}"
  action:
    service: variable.set_variable
    data:
      variable: sophies_room_aqi
    data_template:
      value: >
          {{ states('sensor.sophies_room_aqi')}}
          
- id: preserve_sebastians_room_aqi
  alias: 'Preserve Sebastians Room AQI to Variable'
  hide_entity: true
  initial_state: 'true'
  trigger:
    platform: state
    entity_id: sensor.sebastians_room_aqi
  condition:
    condition: template
    value_template: "{{ not is_state('sensor.sebastians_room_aqi', '0 (Good)') }}"
  action:
    service: variable.set_variable
    data:
      variable: sebastians_room_aqi
    data_template:
      value: >
          {{ states('sensor.sebastians_room_aqi')}}