#    #turn input booleans for all playlist states to off
  turn_playlists_off:
    sequence:
    - service: input_boolean.turn_off
      data: 
        entities:  
        - input_boolean.mix_playlist
        - input_boolean.jazz_playlist
        - input_boolean.rock_playlist
        - input_boolean.pop_playlist
        - input_boolean.black_playlist
        - input_boolean.best-black_playlist
        - input_boolean.electronica_playlist
        - input_boolean.kids_playlist




#input_boolean.mix_playlist, input_boolean.jazz_playlist, input_boolean.rock_playlist, input_boolean.pop_playlist, input_boolean.black_playlist, input_boolean.classical_playlist, input_boolean.electronica_playlist, input_boolean.kids_playlist




#  - service: notify.pushover
#    data_template:
#      title: "{{ title }}"
#      message: "{{ message }}"

  #turn input booleans for all playlist states to off


  turn_playlists_on:
    sequence:
    - service: input_boolean.turn_on
      data: 
        entities:
        - input_boolean.mix_playlist
        - input_boolean.jazz_playlist
        - input_boolean.rock_playlist
        - input_boolean.pop_playlist
        - input_boolean.black_playlist
        - input_boolean.classical_playlist
        - input_boolean.electronica_playlist
        - input_boolean.kids_playlist
      
#      input_boolean.mix_playlist, input_boolean.jazz_playlist, input_boolean.rock_playlist, input_boolean.pop_playlist, input_boolean.black_playlist, input_boolean.classical_playlist, input_boolean.electronica_playlist, input_boolean.kids_playlist
#      input_boolean.mix_playlist
#      input_boolean.jazz_playlist
#      input_boolean.rock_playlist
#      input_boolean.pop_playlist
#      input_boolean.black_playlist
#      input_boolean.classical_playlist
#      input_boolean.electronica_playlist
#      input_boolean.kids_playlist
#
#
#      - input_boolean.mix_playlist
#      - input_boolean.jazz_playlist
#      - input_boolean.rock_playlist
#      - input_boolean.pop_playlist
#      - input_boolean.black_playlist
#      - input_boolean.classical_playlist
#      - input_boolean.electronica_playlist
#      - input_boolean.kids_playlist


  play_good_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'a-45-star'
          media_content_type: 'playlist'

#      - delay:
#          seconds: 2
#      - service: python_script.call_service_on_multiple_entities
#        data_template:
#          operations: >
#            {% set topic = states.sensor.last_alexa.state %}
#            {% if topic == 'media_player.sean_s_2nd_fire' %}
#              homeassistant.turn_on|media_player.kitchen_airtunes_speaker|media_player.living_room_airtunes_speaker
#            {% else %}
#            {% endif %}

  play_jazz_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'best-jazz'
          media_content_type: 'playlist'

  play_rock_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'best-rock'
          media_content_type: 'playlist'

  play_pop_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'best-pop'
          media_content_type: 'playlist'


  play_classical_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'classical'
          media_content_type: 'playlist'

  play_black_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'best-black'
          media_content_type: 'playlist'


  play_electronic_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'best-electronica'
          media_content_type: 'playlist'


  play_kids_music:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'kids-english'
          media_content_type: 'playlist'
          
  play_kultoora_radio:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'radio-kultura-ru'
          media_content_type: 'playlist'

          
  play_clasical_radio:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'radio-swiss-classic'
          media_content_type: 'playlist'

          
  play_jazz_radio:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'jazz24'
          media_content_type: 'playlist'

          
  play_ambient_radio:
    sequence:
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.all_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_on
        data_template: 
          entity_id: >-
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %}  
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
      - service: homeassistant.turn_off
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              media_player.computer_airtunes_speaker
            {% else %}
            {% endif %}
      - service: media_player.volume_set
        data_template: 
          entity_id: >- 
            {% if states.sensor.last_alexa.state == "media_player.sean_s_2nd_fire" %} 
              group.alexa_kitchen_bar_speakers
            {% else %}
            {% endif %}
          volume_level: 0.5
      - service: media_player.volume_set
        data: 
          entity_id: media_player.itunes
          volume_level: 0.5
      - service: media_player.play_media
        data:
          entity_id: 'media_player.itunes'
          media_content_id: 'ambient-sleeping-pill'
          media_content_type: 'playlist'

  stop_music:
    sequence:
      - service: media_player.media_pause
        data: 
          entity_id: media_player.itunes
    
  start_music:
    sequence:
      - service: media_player.media_play
        data: 
          entity_id: media_player.itunes
          
  turn_up_music_volume:
    sequence:
      - service: media_player.volume_up
        data: 
          entity_id: media_player.itunes       

  turn_down_music_volume:
    sequence:
      - service: media_player.volume_down
        data: 
          entity_id: media_player.itunes       

  skip_this_song:
    sequence:
      - service: media_player.media_next_track
        data: 
          entity_id: media_player.itunes

  play_last_song:
    sequence:
      - service: media_player.media_previous_track
        data: 
          entity_id: media_player.itunes

  where_is_sean:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            Sean is {{ states.sensor.sean_location.state }}

  when_will_sean_be_home:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            {{ states.sensor.sean_eta.state }}. 
            {{ states.sensor.sean_eta_description.state }}


  where_is_alena:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            Alena is {{ states.sensor.alena_location.state }}

  when_will_alena_be_home:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            {{ states.sensor.alena_eta.state }}. 
            {{ states.sensor.alena_eta_description.state }}

  where_is_sophie:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            Sophie is {{ states.sensor.sophie_location.state }}

  when_will_sophie_be_home:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            {{ states.sensor.sophie_eta.state }}. 
            {{ states.sensor.sopie_eta_description.state }}

  is_today_a_bike_day:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >- 
            {% if states.sensor.bike_day.state == "yes" %} 
              Yes, today is a good day to bike to work
            {% else %}
              No, today isn't a good day to bike to work
            {% endif %}